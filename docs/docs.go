// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authentication/forgot-password": {
            "post": {
                "description": "Send reset password link to user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Request forgot password",
                "parameters": [
                    {
                        "description": "Email payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ForgotPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Plain reset token",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeString"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "user npt found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/authentication/reset-password/{token}": {
            "patch": {
                "description": "Reset password using token from forgot-password email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset password token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ResetPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed message",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeString"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "invalid token",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/authentication/token": {
            "post": {
                "description": "Creates a token for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Creates a token",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateUserTokenPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Token",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeString"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/authentication/user": {
            "post": {
                "description": "Registers a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Registers a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RegisterUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user registered",
                        "schema": {
                            "$ref": "#/definitions/main.UserWithToken"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/genres": {
            "get": {
                "description": "Get all genres",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "summary": "Get all genres",
                "responses": {
                    "200": {
                        "description": "Get all genres successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Genre"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new genre. Admin only",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "summary": "Create a new genre",
                "parameters": [
                    {
                        "description": "Genre Name",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.GenrePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Genre created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Genre"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/genres/{genreID}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "update genre. Admin only",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "summary": "update genre",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Genre ID",
                        "name": "genreID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Genre Name",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.GenrePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Genre updated successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Genre"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/genres/{genreID}/novels": {
            "get": {
                "description": "Get novels from genre name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Get novels from genre name",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Get from genre",
                        "name": "genreID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get novels from genre successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Novel"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/invoices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user's invoices",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Get invoices",
                "responses": {
                    "200": {
                        "description": "Get user invoice successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Invoice"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Invoice not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/invoices/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all invoices. Admin only",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Get all invoices",
                "responses": {
                    "200": {
                        "description": "Get all invoice successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Invoice"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/invoices/{plan}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get invoices according from plan",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Create invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan",
                        "name": "plan",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create invoice successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Invoice"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels": {
            "get": {
                "description": "Get all novels not including chapters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Get all novels",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort by created_at or updated_at",
                        "name": "sorted_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by title",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get all Novels successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Novel"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new novel with title, author, synopsis, genre, and optional image. Admin only",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Create a new novel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Novel Title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Author of the Novel",
                        "name": "author",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Synopsis of the Novel",
                        "name": "synopsis",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Genre IDs (multiple values allowed)",
                        "name": "genre_ids",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Cover image of the Novel",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Novel created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Novel"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels/{genreID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete genre by ID. Admin only",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "summary": "Delete genre",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Genre ID",
                        "name": "genreID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete genre succesfully",
                        "schema": {
                            "type": ""
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Genre not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels/{novelID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific novel by its ID, including chapters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Get novel detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail novel with chapters",
                        "schema": {
                            "$ref": "#/definitions/store.Novel"
                        }
                    },
                    "400": {
                        "description": "Invalid novel ID",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete novel by ID. Admin only",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Delete novel",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete novel succesfully",
                        "schema": {
                            "type": ""
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing novel's title, author, synopsis, or genre. Admin only.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Update novel",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdateNovelPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated novel",
                        "schema": {
                            "$ref": "#/definitions/store.Novel"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels/{novelID}/bookmark": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user bookmark",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookmarks"
                ],
                "summary": "Create a new bookmark",
                "responses": {
                    "201": {
                        "description": "Bookmark created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Bookmark"
                        }
                    },
                    "400": {
                        "description": "Bookmark already exist",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels/{novelID}/chapters": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new chapter with slug, title, author, content, chapter number, price and status is locked. Admin only",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Create a new chapter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "chapter payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateChapterPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Chapter created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Chapter"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels/{novelID}/chapters/{slug}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific chapter by its slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Get chapter detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Chapter Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail chapter",
                        "schema": {
                            "$ref": "#/definitions/store.Chapter"
                        }
                    },
                    "400": {
                        "description": "Invalid novel ID or slug",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "402": {
                        "description": "Payment required",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel or chapter not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete chapter by slug",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Delete chapter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Chapter Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete chapter succesfully",
                        "schema": {
                            "type": ""
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel or chapter not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing chapter's title, content, chapter number, status is_locked or price. Admin only.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Update chapter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Chapter Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdateChapterPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated chapter",
                        "schema": {
                            "$ref": "#/definitions/store.Chapter"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels/{novelID}/chapters/{slug}/unlock": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "User can unlock chapter by coin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Unlock chapter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Chapter Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated chapter",
                        "schema": {
                            "$ref": "#/definitions/store.UserUnlock"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "402": {
                        "description": "Insufficient coin",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel or chapter not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/novels/{novelID}/image": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the cover image of a novel. Admin only.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Change novel image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Novel ID",
                        "name": "novelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file (jpg, png, etc.)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated novel with new image",
                        "schema": {
                            "$ref": "#/definitions/store.Novel"
                        }
                    },
                    "400": {
                        "description": "Bad request (e.g. no image)",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Novel not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the profile of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user profile, including username and/or email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Updated user profile data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateUpdateUsernamePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user profile data",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/users/activate/{token}": {
            "put": {
                "description": "Activate user account using a valid token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User account activated",
                        "schema": {
                            "type": ""
                        }
                    },
                    "404": {
                        "description": "invalid token",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/users/bookmark": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user bookmark",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookmarks"
                ],
                "summary": "Get bookmark",
                "responses": {
                    "200": {
                        "description": "Get Bookmarks successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Bookmark"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/users/bookmark/{bookmarkID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete bookmark by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novels"
                ],
                "summary": "Delete bookmark",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bookmark ID",
                        "name": "bookmarkID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete bookmark succesfully",
                        "schema": {
                            "type": ""
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "Bookmark not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/users/change-password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the password of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "New password",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ChangePasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password change success message",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/users/image": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change User Image",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image file (jpg, png, etc.)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user with new image",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "400": {
                        "description": "Bad request (e.g. no image)",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "401": {
                        "description": "Unauthorize",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        },
        "/users/{userID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the user profile by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.EnvelopeError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ChangePasswordPayload": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.CreateChapterPayload": {
            "type": "object",
            "required": [
                "chapter_number",
                "content",
                "slug",
                "title"
            ],
            "properties": {
                "chapter_number": {
                    "type": "number"
                },
                "content": {
                    "type": "string"
                },
                "is_locked": {
                    "type": "boolean"
                },
                "price": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string",
                    "maxLength": 100
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "main.CreateUpdateUsernamePayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "username": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "main.CreateUserTokenPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.ForgotPasswordPayload": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "main.GenrePayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "main.RegisterUserPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "username": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "main.ResetPasswordPayload": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.UpdateChapterPayload": {
            "type": "object",
            "properties": {
                "chapter_number": {
                    "type": "number"
                },
                "content": {
                    "type": "string"
                },
                "is_locked": {
                    "type": "boolean"
                },
                "price": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "main.UpdateNovelPayload": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string",
                    "maxLength": 255
                },
                "genre_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "synopsis": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "main.UserWithToken": {
            "type": "object",
            "properties": {
                "coin": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "token_version": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "store.Bookmark": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "novel_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "store.Chapter": {
            "type": "object",
            "properties": {
                "chapter_number": {
                    "type": "number"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_locked": {
                    "type": "boolean"
                },
                "is_read": {
                    "type": "boolean"
                },
                "novel_id": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "store.Genre": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "store.Invoice": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invoice_id": {
                    "type": "string"
                },
                "invoice_url": {
                    "type": "string"
                },
                "plan": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/store.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "store.Novel": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "chapters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.Chapter"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "genre": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.Genre"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "synopsis": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "store.User": {
            "type": "object",
            "properties": {
                "coin": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "token_version": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "store.UserUnlock": {
            "type": "object",
            "properties": {
                "chapter_slug": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "swagger.EnvelopeError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "swagger.EnvelopeString": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Govel API",
	Description:      "RESTful API for an online novel platform — read, publish, and manage digital stories.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
